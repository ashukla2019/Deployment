Skip to content
Open sidebar

ChatGPT
You said:
Able to create vm from vhd by creating managed disk and vhd is stored in storage account but unable to created vm from gallery image which is comoputed from same vhd image, getting error vm creation falied due to taking too much time
ChatGPT said:
Got it 👍
Let’s break down your issue step by step:

✅ What’s working
You successfully created a VM from a VHD by:

Uploading the VHD into a storage account.

Creating a managed disk from that VHD.

Deploying a VM using that managed disk as the OS disk.
👉 So the VHD itself is fine.

❌ What’s failing
You created an Azure Compute Gallery (ACG) Image from the same VHD.

When creating a VM from the gallery image, provisioning fails with timeout (OS provisioning took too long).

🔎 Why this happens
The difference is in how Azure handles provisioning:

Managed disk → VM

Directly boots from the disk (no provisioning agent involvement).

Works even if the OS is not generalized.

Gallery image → VM

Azure expects the VHD/image to be generalized (Sysprep for Windows, waagent -deprovision for Linux).

Requires that the Azure VM Agent is installed and can communicate.

If the image wasn’t properly prepared, VM creation hangs and times out at OSProvisioning.

🔧 Common causes
VHD wasn’t generalized before creating the gallery image.

Missing Azure Linux Agent (walinuxagent) or Windows Azure Guest Agent.

Wrong OS type selection while creating the gallery image (Windows/Linux mismatch).

Corrupt/unsupported VHD format (should be fixed-size, not dynamic).

Image SKU not matching (e.g., trying to deploy Linux but selected Windows).

✅ Fix / Next Steps
Check if the base VM was generalized

For Windows: Run sysprep /generalize /oobe /shutdown.

For Linux: Run

sudo waagent -deprovision+user -force
Then capture the image.

Recreate the gallery image

From the generalized VHD, create a managed disk → image → gallery image definition/version.

Verify Azure Agent

Windows: C:\WindowsAzure\Packages\Provisioning should exist.

Linux: systemctl status walinuxagent.

Check provisioning logs in the failed VM

Boot diagnostics screenshot often shows if it’s stuck at OOBE or login prompt.

Serial console logs → “OSProvisioningTimedOut” indicates missing agent/sysprep issue.

👉 Quick test:
If you want a working gallery image fast, take a VM that you already created from the managed disk, install the Azure agent, generalize it, and then capture it into the gallery.

Do you want me to give you a step-by-step command/script (Azure CLI/PowerShell) to correctly generalize and create the gallery image from your existing VHD so provisioning will succeed?

You said:
While checking gallery image is showing provisioning successfull
ChatGPT said:
Thanks for clarifying 👍
If the Azure Compute Gallery (ACG) image version itself shows provisioning successful, then the gallery image creation worked fine.

That means the failure is happening only at VM creation time from that gallery image.
Let’s troubleshoot that path:

🔎 Key things to check
Generalization of source VHD

Even if gallery image says “provisioning successful,” Azure doesn’t validate sysprep/deprovision during image creation.

A non-generalized VHD will still let you create an image, but any VM deployed from it will fail with OS provisioning timeout.

Azure VM Agent inside image

VM provisioning depends on the Azure Linux Agent (waagent) or Windows Azure Guest Agent.

If missing or not running, the VM can’t report status → causes timeout.

Boot diagnostics of failed VM

Go to Failed VM → Boot diagnostics screenshot / Serial console.

Check whether it’s stuck at:

Windows OOBE / sysprep screens.

Linux login prompt with no agent.

If the VM boots but Azure can’t inject username/SSH key, that’s an agent/generalization issue.

Gallery image definition settings

Was the image definition created with OS type (Windows/Linux) correct?

Wrong OS type will definitely cause provisioning timeouts.

✅ How to confirm what’s wrong
If VM from managed disk works fine, but VM from gallery image fails → 100% it’s generalization / agent issue.

To confirm:

Deploy a VM from the managed disk again.

Check if Azure agent is installed & running:

Linux:

systemctl status walinuxagent
Windows: Services → “Windows Azure Guest Agent”.

If missing → install it.

Then generalize (sysprep or waagent -deprovision+user).

Recreate image version in gallery.

🚑 What you can do now
Since the gallery image is “successfully provisioned” but VMs fail:

Take your working VM from the managed disk.

Install/verify Azure VM Agent.

Generalize it properly.

Capture into ACG again.

Retry VM creation → should succeed.

👉 Question for you:
When you created the gallery image definition, did you mark it as generalized (sysprep/waagent) or specialized?

Because if you’re trying to use it as generalized while it’s actually specialized, that would exactly cause the timeout you’re seeing.

You said:
How to perform these steps Take your working VM from the managed disk.

Install/verify Azure VM Agent.

Generalize it properly.

Capture into ACG again.

Retry VM creation → should succeed.
ChatGPT said:
Perfect 👍 I’ll give you the exact step-by-step process (both Windows & Linux) to take your working VM → make it ready → capture → put into Azure Compute Gallery (ACG).

🖥 Step 1: Create a VM from the managed disk
Since you already did this once and it worked, just deploy a VM from the managed disk (that proves the VHD is bootable).

🛠 Step 2: Install / Verify Azure VM Agent
Azure needs the VM agent inside the OS to finish provisioning.

🔹 For Linux:
Check if installed:

systemctl status walinuxagent
If not installed:

sudo apt-get update && sudo apt-get install walinuxagent -y     # Ubuntu/Debian
sudo yum install WALinuxAgent -y                               # RHEL/CentOS
Enable it:

sudo systemctl enable walinuxagent
sudo systemctl start walinuxagent
🔹 For Windows:
Open Services.msc.

Look for Windows Azure Guest Agent.

If missing, install the Windows Azure Guest Agent MSI.

🧹 Step 3: Generalize the VM
You need to “generalize” before creating an image.

🔹 Linux:
Run inside VM:

sudo waagent -deprovision+user -force
Then shut down the VM (do not restart).

🔹 Windows:
Run Command Prompt as Administrator.

Execute:

sysprep /generalize /oobe /shutdown
Check: C:\Windows\System32\Sysprep\sysprep.exe GUI → Generalize + OOBE + Shutdown.

VM will shut down automatically.

⚠️ Important: After generalization, do not start the VM again.

📦 Step 4: Capture the VM into Azure Compute Gallery
Now from Azure Portal / CLI:

Azure Portal:
Go to the generalized VM.

Click Capture.

Select:

“Automatically delete this VM after creating the image” ✅

Destination → Azure Compute Gallery.

Choose existing gallery → Create image definition → Add new image version.

Capture completes → New image version appears in your ACG.

Azure CLI:
# Create image definition (only once)
az sig image-definition create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --publisher myCompany \
  --offer myOffer \
  --sku mySku \
  --os-type Linux   # or Windows

# Capture the VM into a gallery image version
az sig image-version create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --gallery-image-version 1.0.0 \
  --managed-image "/subscriptions/<sub-id>/resourceGroups/<rg-name>/providers/Microsoft.Compute/images/<image-name>"
🚀 Step 5: Create VM from Gallery Image
Now, when you deploy a new VM from the gallery image, provisioning should succeed.

Boot diagnostics will show a normal login prompt, and Azure will inject the username/SSH key.

✅ At this point:

If you want reusable specialized images (no sysprep/waagent cleanup), you can mark the image definition as specialized.

If you want generalized golden images (used for scale-out), use the generalize → capture flow above.

Would you like me to give you a ready-made Azure CLI script that does all these steps in one go (from VM generalization → gallery capture → new VM deployment)?

You said:
If VM from managed disk works fine, but VM from gallery image fails → 100% it’s generalization / agent issue.then why its not failing with vhd image?
ChatGPT said:
Great question 🙌 — this is the exact point where people usually get confused.
Let me break down why a VM from a managed disk works, but a VM from the same VHD through the gallery fails:

🔹 Path 1: VM from Managed Disk (Specialized Deployment)
When you create a VM directly from a managed disk (from VHD):

Azure just attaches that disk as the OS disk.

No need for generalization.

No Azure Agent is required during creation.

It’s like booting up your own physical machine from an existing hard drive — Azure doesn’t touch it much.

That’s why it works even if the OS was never sysprepped/deprovisioned.

👉 This is why your VM boots fine from the VHD.

🔹 Path 2: VM from Gallery Image (Generalized Deployment)
When you create a gallery image, Azure assumes this image is going to be reused for scale-out deployments.

By default, gallery images are expected to be generalized:

Windows → sysprep /generalize

Linux → waagent -deprovision+user

During VM creation from a gallery image:

Azure tries to run the OS Provisioning process:

Inject username, SSH keys, passwords.

Configure hostname, extensions.

Communicate with the Azure VM Agent inside the OS.

If the VM is not generalized OR agent is missing, Azure waits… and eventually fails with:

OSProvisioningTimedOut or

VM creation failed due to taking too much time.

👉 That’s why your gallery-based VM is failing.

🔑 Core Difference
Managed disk → VM = Specialized flow (boot disk as-is, no provisioning needed).

Gallery image → VM = Generalized flow (requires VM Agent + generalization).

That’s why:

From VHD/Managed disk → Works fine.

From Gallery image → Fails, unless you’ve generalized the VM before capturing.

✅ Solution:
If you want the gallery to behave like your current VHD flow, you need to decide:

Specialized image in ACG → No sysprep, no waagent deprovision.

Use when you want the VM to come up exactly as-is.

But you can’t reset username/SSH keys on deploy.

Generalized image in ACG → Must sysprep/waagent.

Use when you want clean reusable images (recommended for scaling).

👉 Do you want me to show you how to create a “specialized” gallery image so it behaves exactly like your VHD-managed disk case (no generalization needed)?

You said:
Yes please
ChatGPT said:
Perfect 👍
If you want your Azure Compute Gallery (ACG) image to behave exactly like your VHD/managed disk flow (no sysprep, no waagent deprovision, no provisioning timeout), you should create a specialized image in the gallery.

🛠 Steps to Create a Specialized Image in Azure Compute Gallery
🔹 1. Make sure your VM / VHD works
You already tested that the VHD → Managed Disk → VM boots fine.

That’s your source.

🔹 2. Create Image Definition (Specialized)
In ACG, image definition tells Azure whether the image is Generalized or Specialized.

Azure CLI:

az sig image-definition create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --publisher myCompany \
  --offer myOffer \
  --sku mySku \
  --os-type Linux \        # or Windows
  --os-state specialized    # 👈 this is the key
👉 --os-state specialized makes it behave like your managed disk.

🔹 3. Create Image Version from Managed Disk
Take the managed disk you built from the VHD, and publish it into the gallery.

az sig image-version create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --gallery-image-version 1.0.0 \
  --managed-image "/subscriptions/<sub-id>/resourceGroups/<rg-name>/providers/Microsoft.Compute/images/<image-name>"
Or, if you directly want to use the managed disk:

az sig image-version create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --gallery-image-version 1.0.0 \
  --os-snapshot "/subscriptions/<sub-id>/resourceGroups/<rg-name>/providers/Microsoft.Compute/disks/<disk-name>"
🔹 4. Deploy VM from Specialized Gallery Image
Now create a VM:

az vm create \
  --resource-group <rg-name> \
  --name MyVMFromGallery \
  --image "/subscriptions/<sub-id>/resourceGroups/<rg-name>/providers/Microsoft.Compute/galleries/<gallery-name>/images/<image-def-name>/versions/1.0.0" \
  --authentication-type all \
  --admin-username myuser \
  --ssh-key-values ~/.ssh/id_rsa.pub
⚠️ Important:

In specialized images, you cannot reset username/SSH keys during deployment — the VM boots with whatever was in the original VHD.

So use the same credentials you had when you created the managed disk.

✅ With this, the gallery image behaves exactly like your VHD-managed disk workflow — no sysprep, no waagent deprovision, no OS provisioning timeout.

👉 Do you want me to also give you the Portal (UI) steps for specialized gallery images (click-by-click), in case you prefer GUI over CLI?

You said:
Generally gallery image should have generalized os and agent installed or not 
ChatGPT said:
Excellent question 👌 — let’s clear this up once and for all because this is where people get tripped up.

🔹 General Rule for Azure Compute Gallery (ACG) Images
✅ Generalized Gallery Image
OS must be generalized

Windows → sysprep /generalize /oobe /shutdown

Linux → waagent -deprovision+user -force

Azure VM Agent must be installed

Windows → Windows Azure Guest Agent

Linux → WALinuxAgent (walinuxagent)

Why?

Because during VM creation, Azure needs to inject username/password/SSH keys, configure hostname, extensions, etc.

This provisioning happens through the VM Agent inside the OS.

Use case: Golden images, scale sets, standard deployments.

✅ Specialized Gallery Image
OS is not generalized

You capture it “as-is” — with users, configs, and apps intact.

VM Agent not strictly required

Azure won’t run full provisioning (no username/SSH reset).

The VM will boot with the state from the source VHD/VM.

Why?

This is basically a “bootable disk clone” stored in the gallery.

Use case: Disaster recovery, migration, stateful workloads.

🔑 Key Difference
Image Type	Generalization Needed?	Agent Required?	Username/SSH reset?
Generalized	✅ Yes	✅ Yes	✅ Injected during deploy
Specialized	❌ No	❌ Optional	❌ Must use original creds
👉 So to directly answer your question:

Generalized ACG image → Yes, must have generalized OS + VM Agent installed.

Specialized ACG image → No generalization, and agent is optional (but recommended for extensions/monitoring).

Do you want me to also show you a decision flow (generalized vs specialized) so you know which type to use in your case?

You said:
Acg should have specialized image or generalized image
ChatGPT said:
Great question 👍 — the answer depends on how you plan to use the Azure Compute Gallery (ACG).

Let’s break it down:

🔹 When to use a Generalized Image in ACG
Use case: You want a golden base image to deploy many VMs (scale sets, dev/test, prod replicas).

Requirements:

OS must be generalized (Sysprep for Windows, waagent -deprovision+user for Linux).

Azure VM Agent must be installed.

What happens on deployment:

Azure injects new username/password/SSH keys.

Hostname, extensions, identity → all configured fresh.

Pros:

Reusable across environments.

Recommended by Microsoft for scale-out scenarios.

Cons:

You lose user/data config during sysprep/deprovision.

👉 This is the most common choice for production workloads.

🔹 When to use a Specialized Image in ACG
Use case: You want to preserve the state of an existing VM (migration, lift-and-shift, DR).

Requirements:

No need to generalize.

VM Agent is optional (but useful for monitoring/extensions).

What happens on deployment:

VM boots with the exact same OS, accounts, and configs as the source.

Azure cannot reset username/SSH keys — you must use the original ones.

Pros:

Faster (no need to rebuild or sysprep).

Great for stateful workloads or legacy apps.

Cons:

Not ideal for scaling out many VMs.

Harder to maintain long term.

👉 This is best for migration or DR scenarios.

🔑 Rule of Thumb
If you are building reusable, golden images → Use Generalized ✅

If you are preserving state of an existing VM → Use Specialized ✅

⚡ In your case:
Since you uploaded a ready-made VHD and it works as a bootable managed disk, if you want it to behave the same in ACG → you should use a Specialized image.
But if your goal is to use it as a base image for multiple VMs → you should convert it into a Generalized image.

👉 Do you want me to make a comparison table of ACG Specialized vs Generalized with recommended scenarios (so you can decide quickly)?

You said:
How to enable agent and generalized os in acg
ChatGPT said:
Great 👍 you’re asking the right thing — because for ACG generalized images the two requirements are:

✅ Azure VM Agent is installed & enabled inside the OS

✅ The OS is generalized (Sysprep for Windows / waagent deprovision for Linux)

Let me show you how to prepare a VM → capture into ACG generalized image:

🖥 Step 1: Create a VM from your working VHD/Managed Disk
You already confirmed the VM boots from your VHD-managed disk.

That’s your starting point.

🛠 Step 2: Install / Enable Azure VM Agent
🔹 On Linux
Check if the Azure Linux Agent (walinuxagent) is installed:

systemctl status walinuxagent
If missing, install it:

# Ubuntu/Debian
sudo apt-get update && sudo apt-get install walinuxagent -y
# RHEL/CentOS
sudo yum install WALinuxAgent -y
Enable and start:

sudo systemctl enable walinuxagent
sudo systemctl start walinuxagent
🔹 On Windows
Open Services.msc → look for Windows Azure Guest Agent.

If missing, download and install the agent MSI:
👉 https://github.com/Azure/WindowsAzureGuestAgent

Ensure it is running and set to Automatic.

🧹 Step 3: Generalize the OS
🔹 For Linux
Inside the VM, run:

sudo waagent -deprovision+user -force
Then shut down the VM:

sudo shutdown -h now
⚠️ Do not restart after this — the VM must remain deprovisioned.

🔹 For Windows
Run Command Prompt as Administrator.

Execute:

sysprep /generalize /oobe /shutdown
Or run the GUI tool:

Path: C:\Windows\System32\Sysprep\sysprep.exe

Select Generalize, OOBE, and Shutdown.

VM will shut down automatically.
⚠️ Do not restart after sysprep.

📦 Step 4: Capture into Azure Compute Gallery (Generalized)
Azure Portal
Go to the generalized VM.

Click Capture.

Select:

✅ “Automatically delete this VM after creating the image”

✅ Destination → Azure Compute Gallery

Create a new Image Definition → choose Generalized

Create a new Image Version

Done 🎉

Azure CLI
Create image definition (generalized):

az sig image-definition create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --publisher myCompany \
  --offer myOffer \
  --sku mySku \
  --os-type Linux \      # or Windows
  --os-state generalized  # 👈 generalized state
Capture the VM into gallery:

az sig image-version create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --gallery-image-version 1.0.0 \
  --managed-image "/subscriptions/<sub-id>/resourceGroups/<rg-name>/providers/Microsoft.Compute/images/<image-name>"
🚀 Step 5: Deploy VM from Generalized ACG Image
Now you can deploy new VMs, and Azure will:

Inject new username/SSH keys

Configure hostname, extensions, networking

Fully provision the VM via the VM Agent

✅ With this setup:

You have a generalized gallery image (best for scale-out).

The agent is installed (so provisioning succeeds).

👉 Do you want me to also give you a ready-to-run script (Linux + Windows variants) that you can paste into your VM to do the agent check + generalization in one go?

You said:
I want to add it when creating acg from vhd? 
ChatGPT said:
Got it 👍 — important clarification:

👉 You cannot “add” the agent or generalize directly at the Azure Compute Gallery (ACG) stage if you start only from a raw VHD.

Here’s why:

A VHD is just a disk file — Azure doesn’t know if inside it the OS is generalized or if the VM Agent is installed.

ACG doesn’t modify the VHD — it only wraps it into an image definition + version.

So, if the VHD doesn’t already have the Azure VM Agent installed and wasn’t generalized, the ACG image will fail for generalized deployments.

✅ Correct Flow (From VHD → Generalized ACG Image)
Create a temporary VM from the VHD

az disk create \
  --resource-group <rg-name> \
  --name tempDisk \
  --source https://<storage-account>.blob.core.windows.net/<container>/<your.vhd>

az vm create \
  --resource-group <rg-name> \
  --name tempVM \
  --attach-os-disk tempDisk \
  --os-type Linux   # or Windows
Install VM Agent in that VM (inside the OS)

Linux: install & enable walinuxagent

Windows: install Windows Azure Guest Agent service

Generalize the OS

Linux:

sudo waagent -deprovision+user -force
sudo shutdown -h now
Windows:

sysprep /generalize /oobe /shutdown
Capture into ACG as Generalized

az sig image-definition create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --publisher myCompany \
  --offer myOffer \
  --sku mySku \
  --os-type Linux \
  --os-state generalized

az sig image-version create \
  --resource-group <rg-name> \
  --gallery-name <gallery-name> \
  --gallery-image-definition <image-def-name> \
  --gallery-image-version 1.0.0 \
  --managed-image "/subscriptions/<sub-id>/resourceGroups/<rg-name>/providers/Microsoft.Compute/images/<image-name>"
⚡ Shortcut Option
If you don’t want to go through this generalization flow:

You can create a Specialized ACG image directly from VHD/Managed Disk (--os-state specialized).

But then Azure won’t inject new usernames/SSH keys, and you’ll have to use the original credentials inside the VHD.

👉 So to answer your question directly:

No, you can’t just “add agent + generalization” when creating the ACG from a raw VHD.

You must boot it once as a VM, fix it (install agent + generalize), then capture into the ACG as a generalized image.

Do you want me to give you a full end-to-end Azure CLI script that does:
VHD → Managed Disk → Temp VM → Agent Install → Generalize → Capture into ACG?

You said:
Yes
ChatGPT said:
Perfect 👍 let’s build a step-by-step Azure CLI automation script that takes you from a raw VHD → to a Generalized Azure Compute Gallery (ACG) image with the agent installed and ready.

This script will be structured so you can run it in pieces (since you’ll need to RDP/SSH into the temp VM to install the agent + generalize manually inside the OS).

🛠 Full Flow: VHD → Generalized ACG Image
🔹 1. Variables
# Change these values
rg="MyResourceGroup"
location="eastus"
gallery="MyGallery"
imageDef="MyImageDef"
imageVersion="1.0.0"
vhdUrl="https://<storageaccount>.blob.core.windows.net/<container>/<your.vhd>"
osType="Linux"   # or Windows
tempDisk="tempDisk"
tempVM="tempVM"
🔹 2. Create Managed Disk from VHD
az disk create \
  --resource-group $rg \
  --name $tempDisk \
  --source $vhdUrl \
  --os-type $osType
🔹 3. Create Temporary VM from the Managed Disk
az vm create \
  --resource-group $rg \
  --name $tempVM \
  --attach-os-disk $tempDisk \
  --os-type $osType \
  --generate-ssh-keys   # for Linux; remove if Windows
👉 Now RDP (Windows) or SSH (Linux) into this VM.

🔹 4. Inside the VM → Install VM Agent + Generalize
For Linux:
# Ensure walinuxagent is installed
sudo apt-get update && sudo apt-get install walinuxagent -y   # Ubuntu/Debian
sudo yum install WALinuxAgent -y                              # RHEL/CentOS

# Enable and start
sudo systemctl enable walinuxagent
sudo systemctl start walinuxagent

# Generalize
sudo waagent -deprovision+user -force
sudo shutdown -h now
For Windows:
Install Windows Azure Guest Agent if not present
👉 https://github.com/Azure/WindowsAzureGuestAgent/releases

Run sysprep:

C:\Windows\System32\Sysprep\Sysprep.exe /generalize /oobe /shutdown
⚠️ VM will shut down — do not restart it.

🔹 5. Capture VM into Managed Image
Back on your local CLI:

az vm deallocate --resource-group $rg --name $tempVM
az vm generalize --resource-group $rg --name $tempVM

# Create a managed image from the VM
az image create \
  --resource-group $rg \
  --name "${tempVM}Image" \
  --source $tempVM
🔹 6. Create Gallery + Image Definition (Generalized)
# Create gallery (once per project)
az sig create \
  --resource-group $rg \
  --gallery-name $gallery \
  --location $location

# Create generalized image definition
az sig image-definition create \
  --resource-group $rg \
  --gallery-name $gallery \
  --gallery-image-definition $imageDef \
  --publisher myCompany \
  --offer myOffer \
  --sku mySku \
  --os-type $osType \
  --os-state generalized
🔹 7. Publish Image Version into Gallery
az sig image-version create \
  --resource-group $rg \
  --gallery-name $gallery \
  --gallery-image-definition $imageDef \
  --gallery-image-version $imageVersion \
  --managed-image "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$rg/providers/Microsoft.Compute/images/${tempVM}Image"
🔹 8. Deploy VM from Gallery Image
az vm create \
  --resource-group $rg \
  --name NewVMFromACG \
  --image "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$rg/providers/Microsoft.Compute/galleries/$gallery/images/$imageDef/versions/$imageVersion" \
  --admin-username azureuser \
  --generate-ssh-keys   # Linux only
✅ End Result
Your VHD is now turned into a generalized, agent-enabled Azure Compute Gallery image.

Any new VM you create from it will provision successfully with new username/SSH keys, extensions, and configs.

👉 Do you want me to also write you a shorter version of this script for “Specialized” ACG images (no sysprep/waagent, faster, behaves like managed disk boot)?

You said:
While creating vm from acg should we used os state generalized so that it will create vm successfully
ChatGPT said:
Excellent 👌 this is exactly the key point.
Let me break it down clearly:

🔹 The --os-state in ACG (Azure Compute Gallery)
When you create an Image Definition in ACG, you must tell Azure whether the image is:

generalized → Azure expects the OS was generalized (sysprep for Windows, waagent -deprovision+user for Linux).

specialized → Azure expects the OS was not generalized, it’s captured “as is”.

🔑 What Happens at VM Creation
✅ If --os-state generalized
Azure will inject:

New username/SSH keys/passwords

Hostname

VM extensions, identity, networking configs

Requires:

OS must have been generalized beforehand

Azure VM Agent must be installed & running

If these are missing → VM creation fails with OSProvisioningTimedOut (exactly the error you saw).

✅ If --os-state specialized
Azure does not inject username/SSH keys (you must use the original ones inside the VHD).

No generalization required.

VM boots exactly like the original machine.

Azure Agent is optional (but good for monitoring/extensions).

This flow will succeed even if the image was never generalized.

🔎 So the Answer
👉 If you want a standard reusable VM image (golden image, scale sets, etc.) → Yes, you should use --os-state generalized.
But then you must prepare the VHD/VM properly (install agent + sysprep/deprovision).

👉 If your VHD was not generalized and you just want the VM to boot successfully → Use --os-state specialized.
That way it behaves like your “VM from managed disk” flow.

✅ In your case:

If you want it to behave like your working VHD → managed disk → VM path → use specialized.

If you want to create a proper golden image to reuse across multiple VMs → you must make sure the OS inside is generalized + agent installed, then use generalized.

Would you like me to draw you a decision flow diagram (generalized vs specialized) so you can quickly pick the right option for your ACG images?

You said:
By default vm create uses os state generalized while creating vm from acg?
ChatGPT said:
Exactly ✅ — when you create a VM from an ACG image, Azure assumes the image definition was created correctly and follows its osState.

Here’s how it works:

🔹 Image Definition Controls the OS State
When you create the image definition in Azure Compute Gallery, you specify:

--os-state generalized   # OR
--os-state specialized
That setting becomes part of the image definition metadata.

🔹 VM Creation Behavior
If the image definition is generalized:

Azure will always try to run OS provisioning (inject username/SSH, reset configs, use VM Agent).

If the VHD/VM wasn’t generalized properly → ❌ you get OSProvisioningTimedOut.

If the image definition is specialized:

Azure skips OS provisioning.

VM just boots with the state inside the disk.

No new username/SSH is injected — you must log in with the credentials already baked into the image.

🔑 Important Point
By default, most ACG tutorials/docs show generalized images, because that’s the recommended Microsoft pattern for golden images and scale sets.

So, when you “create VM from gallery image” in the portal, it behaves as if it’s generalized, unless you explicitly created a specialized image definition.

✅ Summary
VM creation doesn’t arbitrarily default to generalized — it follows whatever you defined in the image definition.

If you didn’t specify --os-state specialized, then yes → it’s treated as generalized.

That’s why your VM worked from VHD/managed disk (specialized boot), but failed from ACG (because the ACG image definition was generalized while the OS inside wasn’t).

👉 Do you want me to show you how to check whether your existing ACG image definition is “generalized” or “specialized” with a simple CLI command?

You said:
How to create vm from acg by passing os state specialized?
ChatGPT said:
Great follow-up 👍
Here’s the important bit:

👉 You don’t pass --os-state when creating a VM.
That flag (--os-state generalized | specialized) is only used when creating the image definition in the Azure Compute Gallery (ACG).

When you later create a VM from that image, Azure automatically knows whether to treat it as generalized or specialized based on the image definition metadata.

🔹 Steps to Create VM from a Specialized ACG Image
1️⃣ Create the Image Definition as Specialized
az sig image-definition create \
  --resource-group MyRG \
  --gallery-name MyGallery \
  --gallery-image-definition MyImageDef \
  --publisher myCompany \
  --offer myOffer \
  --sku mySku \
  --os-type Linux \         # or Windows
  --os-state specialized     # 👈 key point
2️⃣ Create the Image Version from Your Disk/Image
If you already have a managed disk from your VHD:

az sig image-version create \
  --resource-group MyRG \
  --gallery-name MyGallery \
  --gallery-image-definition MyImageDef \
  --gallery-image-version 1.0.0 \
  --managed-image "/subscriptions/<sub-id>/resourceGroups/MyRG/providers/Microsoft.Compute/images/MyBaseImage"
3️⃣ Create VM from the Specialized Gallery Image
Now deploy a VM referencing the gallery image.
You don’t specify --os-state here — it’s inferred from the definition.

az vm create \
  --resource-group MyRG \
  --name MyVMFromSpecializedImage \
  --image "/subscriptions/<sub-id>/resourceGroups/MyRG/providers/Microsoft.Compute/galleries/MyGallery/images/MyImageDef/versions/1.0.0" \
  --size Standard_DS1_v2 \
  --authentication-type password \
  --admin-username <existing-username-in-image> \
  --admin-password <password-that-exists-in-vhd>
⚠️ With specialized images:

Azure will not inject a new username/SSH key.

You must log in with the same credentials baked into the VHD/managed disk.

VM Agent is optional, but without it, you can’t use extensions or some management features.

✅ Summary
You set --os-state specialized when creating the ACG image definition.

When creating the VM, Azure automatically uses specialized provisioning — you just provide the same login details as inside your VHD.

👉 Do you want me to also show you the Azure Portal (UI) clicks for creating a specialized ACG image definition + VM (if you prefer GUI over CLI)?

You said:
If os state is used generalized during definition, my vm fails during creation from acg
ChatGPT said:
Yes ✅ — that matches exactly what happens when the image definition is generalized but the source VHD was never generalized.

Let me break it down clearly:

🔹 Why VM Fails When --os-state generalized
When you set --os-state generalized in the image definition, Azure expects that:

The VHD/VM was generalized

Windows: sysprep /generalize /oobe /shutdown

Linux: waagent -deprovision+user -force

Azure VM Agent is installed and running inside the OS.

This allows Azure to inject hostname, username, password/SSH keys, networking config.

The OS disk is in a clean, reusable state.

👉 If the VHD is not generalized and doesn’t have the agent, Azure keeps waiting for provisioning signals that never arrive → you see OSProvisioningTimedOut and the VM creation fails.

🔹 Why It Works When You Use the Same VHD as Managed Disk
When you attach the VHD directly (or create a managed disk → VM), Azure treats it as a specialized VM.

It simply boots “as is” with whatever credentials and settings are inside the disk.

No generalization is expected, so no timeout.

🔹 How to Fix
You have two valid paths:

✅ Option 1: Keep it Specialized
When creating the image definition, use:

--os-state specialized
Then create VM with the baked-in credentials.

This works immediately, but isn’t reusable for scale sets or multiple users (not ideal for golden images).

✅ Option 2: Generalize Properly
Boot a VM from your working VHD/managed disk.

Install/verify Azure VM Agent inside.

Generalize the OS (sysprep for Windows / waagent for Linux).

Capture this generalized VM into ACG with:

--os-state generalized
Now VMs will provision successfully from the gallery image.

✅ Summary
Generalized definition + non-generalized VHD → Fails ❌

Specialized definition + non-generalized VHD → Works ✅

If you want reusable golden images → you must generalize + install agent.

👉 Do you want me to give you the exact commands for Linux and Windows to prepare (generalize + agent) a VM before capturing it into ACG?




No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.
